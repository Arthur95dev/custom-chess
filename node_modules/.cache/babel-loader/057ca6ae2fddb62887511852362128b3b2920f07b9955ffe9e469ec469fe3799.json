{"ast":null,"code":"import { Colors } from \"../Colors\";\nimport { Figure, FigureNames } from \"../Figure\";\nimport black_pawn from '../icons/black_pawn.png';\nimport white_pawn from '../icons/white_pawn.png';\nexport class Pawn extends Figure {\n  constructor(color, cell) {\n    super(color, cell);\n    this.firstMove = void 0;\n    this.name = FigureNames.PAWN;\n    this.figureImg = this.color === Colors.WHITE ? white_pawn : black_pawn;\n    this.firstMove = true;\n  }\n  canMove(cell) {\n    //Общее правило для всех фигур\n    if (!super.canMove(cell)) {\n      return false;\n    }\n    //Логика ходов для белых\n    if (this.color === Colors.WHITE) {\n      if (this.cell.y === cell.y + 1 && cell.figure) {\n        if (cell.x + 1 === this.cell.x || cell.x - 1 === this.cell.x) return true;\n      }\n      if (this.firstMove) {\n        if (this.cell.y <= cell.y + 2 && cell.x === this.cell.x && !cell.figure) return true;\n      } else {\n        if (this.cell.y === cell.y + 1 && cell.x === this.cell.x && !cell.figure) return true;\n      }\n    }\n    //Логика ходов для черных\n    if (this.color === Colors.BLACK) {\n      if (this.cell.y + 1 === cell.y && cell.figure) {\n        if (cell.x + 1 === this.cell.x || cell.x - 1 === this.cell.x) return true;\n      }\n      if (this.firstMove) {\n        if (this.cell.y >= cell.y - 2 && cell.x === this.cell.x && !cell.figure) return true;\n      } else {\n        if (this.cell.y + 1 === cell.y && cell.x === this.cell.x && !cell.figure) return true;\n      }\n    }\n    return false;\n  }\n  moveFigure(cell) {\n    super.moveFigure(cell);\n    this.firstMove = false;\n  }\n}","map":{"version":3,"names":["Colors","Figure","FigureNames","black_pawn","white_pawn","Pawn","constructor","color","cell","firstMove","name","PAWN","figureImg","WHITE","canMove","y","figure","x","BLACK","moveFigure"],"sources":["/home/arthas/chess/src/model/figures/Pawn.ts"],"sourcesContent":["import { Cell } from \"../Cell\";\nimport { Colors } from \"../Colors\";\nimport { Figure, FigureNames } from \"../Figure\";\n\nimport black_pawn from '../icons/black_pawn.png';\nimport white_pawn from '../icons/white_pawn.png';\n\nexport class Pawn extends Figure {\n    firstMove: boolean;\n\n    constructor(color: Colors, cell: Cell) {\n        super(color, cell)\n        this.name = FigureNames.PAWN\n        this.figureImg = this.color === Colors.WHITE ? white_pawn : black_pawn\n        this.firstMove = true\n    }\n\n    canMove(cell: Cell): boolean {\n        //Общее правило для всех фигур\n        if (!super.canMove(cell)) {\n            return false\n        }\n        //Логика ходов для белых\n        if (this.color === Colors.WHITE) {\n            if ((this.cell.y === cell.y + 1) && cell.figure) {\n                if (cell.x + 1 === this.cell.x || cell.x - 1 === this.cell.x) return true\n            }\n            if (this.firstMove) {\n                if ((this.cell.y <= cell.y + 2) && (cell.x === this.cell.x) && !cell.figure) return true\n            } else {\n                if ((this.cell.y === cell.y + 1) && (cell.x === this.cell.x) && !cell.figure) return true\n            }\n        } \n        //Логика ходов для черных\n        if (this.color === Colors.BLACK) {\n            if ((this.cell.y + 1 === cell.y) && cell.figure) {\n                if (cell.x + 1 === this.cell.x || cell.x - 1 === this.cell.x) return true\n            }\n            if (this.firstMove) {\n                if ((this.cell.y >= cell.y - 2) && (cell.x === this.cell.x) && !cell.figure) return true\n            } else {\n                if ((this.cell.y + 1 === cell.y) && (cell.x === this.cell.x) && !cell.figure) return true\n            }\n        }\n\n        return false\n    }\n\n    moveFigure(cell: Cell): void {\n        super.moveFigure(cell)\n        this.firstMove = false\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/arthas/chess/src/components/BoardComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { CellComponent } from \"./CellComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BoardComponent = _ref => {\n  _s();\n  let {\n    board,\n    setBoard\n  } = _ref;\n  const [selectedCell, setSelectedCell] = useState(null);\n  function cellClickHundler(cell) {\n    if (selectedCell === cell || !cell.figure && !cell.available) {\n      setSelectedCell(null);\n      board.availableCellsForMove(null);\n      return;\n    }\n    if (selectedCell && cell.available) {\n      selectedCell.moveFigure(cell);\n      setSelectedCell(null);\n      board.availableCellsForMove(null);\n      setBoard(board.updatedBoard());\n      return;\n    }\n    if (cell.figure) {\n      setSelectedCell(cell);\n      board.availableCellsForMove(cell);\n      setBoard(board.updatedBoard());\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.cells.map((row, index) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map(cell => {\n          return /*#__PURE__*/_jsxDEV(CellComponent, {\n            cell: cell,\n            selected: (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) === cell.x && (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y) === cell.y,\n            click: cellClickHundler\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 36\n          }, this);\n        })\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(BoardComponent, \"7ZpXPQIyeTuNHRqwYg7ZM80LtbY=\");\n_c = BoardComponent;\nvar _c;\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useState","CellComponent","jsxDEV","_jsxDEV","BoardComponent","_ref","_s","board","setBoard","selectedCell","setSelectedCell","cellClickHundler","cell","figure","available","availableCellsForMove","moveFigure","updatedBoard","className","children","cells","map","row","index","Fragment","selected","x","y","click","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/arthas/chess/src/components/BoardComponent.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport { Board } from \"../model/Board\";\nimport { Cell } from \"../model/Cell\";\nimport { CellComponent } from \"./CellComponent\";\n\ninterface BoardComponentProps {\n    board: Board;\n    setBoard: (board: Board) => void;\n}\n\nexport const BoardComponent: FC<BoardComponentProps> = ({board, setBoard}) => {\n    \n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\n\n    function cellClickHundler(cell: Cell) {\n        if (selectedCell === cell || (!cell.figure && !cell.available)) {\n            setSelectedCell(null);\n            board.availableCellsForMove(null);\n            return\n        }\n        if (selectedCell && cell.available) {\n            selectedCell.moveFigure(cell);\n            setSelectedCell(null);\n            board.availableCellsForMove(null);\n            setBoard(board.updatedBoard());\n            return\n        }\n\n        if (cell.figure) {\n            setSelectedCell(cell);\n            board.availableCellsForMove(cell);\n            setBoard(board.updatedBoard());\n        }\n    }\n\n    return (\n        <div className=\"board\">\n            {board.cells.map((row, index) => {\n                return (\n                    <React.Fragment key={index}>\n                        {row.map(cell => {\n                            return <CellComponent \n                                    cell={cell}\n                                    selected={(selectedCell?.x === cell.x) && (selectedCell?.y === cell.y)}\n                                    click={cellClickHundler}\n                                    key={cell.id}\n                                    />\n                        })}\n                    </React.Fragment>\n                )\n            })}\n        </div>\n    )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAmBC,QAAQ,QAAQ,OAAO;AAGtD,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOhD,OAAO,MAAMC,cAAuC,GAAGC,IAAA,IAAuB;EAAAC,EAAA;EAAA,IAAtB;IAACC,KAAK;IAAEC;EAAQ,CAAC,GAAAH,IAAA;EAErE,MAAM,CAACI,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAc,IAAI,CAAC;EAEnE,SAASW,gBAAgBA,CAACC,IAAU,EAAE;IAClC,IAAIH,YAAY,KAAKG,IAAI,IAAK,CAACA,IAAI,CAACC,MAAM,IAAI,CAACD,IAAI,CAACE,SAAU,EAAE;MAC5DJ,eAAe,CAAC,IAAI,CAAC;MACrBH,KAAK,CAACQ,qBAAqB,CAAC,IAAI,CAAC;MACjC;IACJ;IACA,IAAIN,YAAY,IAAIG,IAAI,CAACE,SAAS,EAAE;MAChCL,YAAY,CAACO,UAAU,CAACJ,IAAI,CAAC;MAC7BF,eAAe,CAAC,IAAI,CAAC;MACrBH,KAAK,CAACQ,qBAAqB,CAAC,IAAI,CAAC;MACjCP,QAAQ,CAACD,KAAK,CAACU,YAAY,CAAC,CAAC,CAAC;MAC9B;IACJ;IAEA,IAAIL,IAAI,CAACC,MAAM,EAAE;MACbH,eAAe,CAACE,IAAI,CAAC;MACrBL,KAAK,CAACQ,qBAAqB,CAACH,IAAI,CAAC;MACjCJ,QAAQ,CAACD,KAAK,CAACU,YAAY,CAAC,CAAC,CAAC;IAClC;EACJ;EAEA,oBACId,OAAA;IAAKe,SAAS,EAAC,OAAO;IAAAC,QAAA,EACjBZ,KAAK,CAACa,KAAK,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;MAC7B,oBACIpB,OAAA,CAACJ,KAAK,CAACyB,QAAQ;QAAAL,QAAA,EACVG,GAAG,CAACD,GAAG,CAACT,IAAI,IAAI;UACb,oBAAOT,OAAA,CAACF,aAAa;YACbW,IAAI,EAAEA,IAAK;YACXa,QAAQ,EAAG,CAAAhB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEiB,CAAC,MAAKd,IAAI,CAACc,CAAC,IAAM,CAAAjB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEkB,CAAC,MAAKf,IAAI,CAACe,CAAG;YACvEC,KAAK,EAAEjB;UAAiB,GACnBC,IAAI,CAACiB,EAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACX,CAAC;QACd,CAAC;MAAC,GAReV,KAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASV,CAAC;IAEzB,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAA3B,EAAA,CA3CYF,cAAuC;AAAA8B,EAAA,GAAvC9B,cAAuC;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}